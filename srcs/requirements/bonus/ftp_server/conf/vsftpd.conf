#Disable anonymous login. Only registered users can log in.
anonymous_enable=NO

#allow local users (like $FTP_USR) to log in.
#Without this, even valid users cannot access FTP,
#Your $FTP_USR won’t be able to log in.
local_enable=YES

#Allows FTP users to upload, delete, and modify files.
#WordPress files need to be editable; otherwise, FTP would be read-only.
write_enable=YES

#Shows messages when entering a directory (from .message files).
dirmessage_enable=YES

#enable transfer logging
#Every time a client uploads or downloads a file, vsftpd writes a log entry about it
#Why you need it:
#1. Monitoring: You can see which files were uploaded/downloaded.
#2. Debugging: If something goes wrong, you can check the logs to find out why.
#3. Security/audit: You can track who accessed
xferlog_enable=YES

#for active FTP (data channel uses port 20)
#FTp has two modes -> active mode and passive mode
#because of how it was originally designed with two separate channels:
#1. Command channel → always port 21, used for sending commands
#2. Data channel → used to actually transfer the file or directory listing
#The reason for two modes is:
#1. In active mode, the server initiates the data connection to the client.
#2. In passive mode, the client initiates the data connection to the server.
connect_from_port_20=YES

#Shows a custom welcome message when a client connects
ftpd_banner=Welcome to FTP server of inception!

#Locks users into their home directory (cannot access / or other directories).
#Why you need it: Security. You don’t want $FTP_USR to navigate outside /var/www/html.
chroot_local_user=YES

#Allows users to write inside a chrooted directory.
#sftpd normally forbids writing in a chroot directory for security; setting this allows WordPress files to be edited/uploaded.
allow_writeable_chroot=YES

#Replaces $USER in other directives with the current FTP username.
user_sub_token=$USER

#Sets the home directory for all local FTP users.
#Ensures $FTP_USR starts in the WordPress folder, so uploads go directly into /var/www/html.
local_root=/var/www/html

#tells vsftpd to run in standalone mode.
#What is standalone mode?
#Standalone mode means that the FTP server runs as its own independent program
#daemon) and listens directly for connections on the network

#By default, vsftpd can work in two modes:
#1. Standalone mode → it runs as its own daemon and listens on port 21 itself.
#2. Inetd/xinetd mode → it waits for another service to start it when a connection comes in.
#If you don’t explicitly tell vsftpd to run standalone, it will do nothing, because nothing starts it.
#listen=YES tells vsftpd:
#“I should run myself as a process, listen for
#connections on port 21, and handle them directly.”
#This creates a process inside the container, which Docker keeps alive, and clients can connect to.
listen=YES

#FTP listens on port 21.
listen_port=21

#Listens on all network interfaces inside the container
#Ensures your FTP server is reachable from other containers and the host machine
listen_address=0.0.0.0

#Disables seccomp sandboxing in vsftpd.
#Seccomp = Secure Computing Mode.
seccomp_sandbox=NO

#Enables passive FTP mode.
pasv_enable=YES

#Port range for passive data connections.
pasv_min_port=21000
pasv_max_port=21010

#Path to the whitelist file
#Your container writes $FTP_USR here for authentication
userlist_file=/etc/vsftpd.userlist

#Users in the whitelist are allowed, all others denied
userlist_deny=NO